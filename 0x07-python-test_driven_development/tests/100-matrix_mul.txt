# Tests for matrix multiplication

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

# Test with two matrices
>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[7, 10], [15, 22]]

# Test with list and matrix
>>> print(matrix_mul([1,2], [[1, 2], [3, 4]]))
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

# Test with two matrices
>>> print(matrix_mul([[1,2]], [[1, 2], [3, 4]]))
[[7, 10]]
>>> print(matrix_mul([[1,2]], [[3,4], [5, 6]]))
[[13, 16]]

# Test with two matrices, m_b contains a non-integer
>>> print(matrix_mul([[1,2]], [[3,4], [5, "r"]]))
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

# Test with two matrices, m_a contains a non-integer
>>> print(matrix_mul([[1,None]], [[3,4], [5, 8.7]]))
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

# Test with m_a as not a list
>>> print(matrix_mul("a", [[3,4], [5, 8.7]]))
Traceback (most recent call last):
...
TypeError: m_a must be a list

# Test with m_b as not a list
>>> print(matrix_mul([[1,2]], "e"))
Traceback (most recent call last):
...
TypeError: m_b must be a list

# Test with m_b as not a list of list
>>> print(matrix_mul([[1,2]], [3,4]))
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists

# Test with m_a as not a list of list
>>> print(matrix_mul([8], [[3,4], [5, 8.7]]))
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

# Test with m_a as empty list
>>> print(matrix_mul([], [[3,4], [5, 8.7]]))
Traceback (most recent call last):
...
ValueError: m_a can't be empty

# Test with m_b as empty list
>>> print(matrix_mul([[1,2]], []))
Traceback (most recent call last):
...
ValueError: m_b can't be empty

# Test with m_b with row of different size
>>> print(matrix_mul([[1,2]], [[3,4], [5, 4, 6]]))
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

# Test with m_a with row of different size
>>> print(matrix_mul([[1,2, 4]], [[3,4], [5, 6]]))
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied

# Test with only one argument(m_a)
>>> matrix_mul([[2, 4, 6], [2, 4, 6]], )
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

# Test with only one argument(m_b)
>>> matrix_mul(m_b=[[2, 4, 6], [2, 4, 6]])
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 1 required positional argument: 'm_a'

# Test with m_b as list of list but not all integers
>>> matrix_mul([[2, 4, 6], [2, 4, 6]], [[2, 4, 6], [2, 4, "r"]] )
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

# Test with no arguments given
>>> matrix_mul()
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

# Test with m_a as list of list with different sizes
>>> matrix_mul([[2, 4, 6], [2, 4, 6, 5]], [[3, 5, 7]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size
